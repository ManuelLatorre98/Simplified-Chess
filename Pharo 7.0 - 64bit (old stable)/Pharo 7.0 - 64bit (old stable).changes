----QUIT----2020-06-29T10:47:39.890105+02:00 Pharo7.0.5-0-32bit-fd8c156.image priorSource: 0!----QUIT----2020-06-29T10:47:54.496471+02:00 Pharo7.0.5-0-32bit-fd8c156.image priorSource: 0!Morph subclass: #Escaque	instanceVariableNames: 'filaEscaque columnaEscaque piezaEscaque'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre Ajedrez'!!Escaque methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 16:14'!getColumnaEscaque^columnaEscaque! !!Escaque methodsFor: 'as yet unclassified' stamp: 'Manuel 7/19/2019 16:27'!getPiezaEscaque^piezaEscaque .! !!Escaque methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:48'!getColumnaEscaqueString "devuelvo el escaque como letra para menu"|columnaEscaqueCadena|(columnaEscaque =1)ifTrue: [ columnaEscaqueCadena :='A' ].(columnaEscaque =2)ifTrue: [ columnaEscaqueCadena :='B' ].(columnaEscaque =3)ifTrue: [ columnaEscaqueCadena :='C' ].(columnaEscaque =4)ifTrue: [ columnaEscaqueCadena :='D' ].(columnaEscaque =5)ifTrue: [ columnaEscaqueCadena :='E' ].(columnaEscaque =6)ifTrue: [ columnaEscaqueCadena :='F' ].(columnaEscaque =7)ifTrue: [ columnaEscaqueCadena :='G' ].(columnaEscaque =8)ifTrue: [ columnaEscaqueCadena :='H' ].^columnaEscaqueCadena.! !!Escaque methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 16:14'!getFilaEscaque^filaEscaque ! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/29/2019 16:10'!setColumnaEscaque: unaColumnacolumnaEscaque := unaColumna.! !!Escaque methodsFor: 'initialization' stamp: 'Manuel 7/19/2019 16:13'!setPieza: unaPiezapiezaEscaque := unaPieza.! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 17:09'!initializesuper initialize.self borderWidth: 0.bounds := 486@374 corner: 556@442.color:= Color white.! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/29/2019 16:10'!setFilaEscaque: unaFilafilaEscaque := unaFila! !Object subclass: #Jugador	instanceVariableNames: 'color colPiezas tablero rendicion tablas'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre Ajedrez'!!Jugador methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 13:57'!inicializarJugadorColor: unColor conPiezas: unaColPiezas enElTablero: unTablero.color:= unColor.colPiezas := unaColPiezas.tablero:= unTablero.rendicion:= false.tablas:= false.! !!Jugador methodsFor: 'Modificadores' stamp: 'Manuel 7/24/2019 13:52'!setTablas: unBooleantablas:= unBoolean .! !!Jugador methodsFor: 'Menu' stamp: 'Manuel 7/24/2019 16:59'!menuTablas: unNumeroJugador|menu|menu:=UIManager default "Acepta o Rechaza tablas"chooseFrom: #('Aceptar' 'Rechazar')lines: #(1) message: 'JUGADOR ', unNumeroJugador asString ,': El adversario propuso resolver el juego en tablas: '.(menu=1) ifTrue: [ 	tablas:=true.	 ].(menu=2)ifTrue: [ 	tablas:=false.	 ].^tablas.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:49'!menuOpcionesJugador: numeroJugador|menu piezaComida|menu:= UIManager defaultchooseFrom: #('HACER MOVIMIENTO' '' 'RENDIRSE' 'OFRECER TABLAS')lines: #(2 3) message: 'TURNO: Jugador',numeroJugador asString,'   Elija una opcion:'. "Utilizo 2 casillas para hacer movimiento para no apretar Rendirse sin querer ya que quedan bastante juntas las opciones"((menu<=2))ifTrue: [ "Elije hacer movimiento pasa al menu para realizarlo"	piezaComida:=(self menuPidePiezaJugador: numeroJugador ).	 ].(menu=3)ifTrue: [ "Elije Rendirse"	rendicion :=true.	 ].(menu=4)ifTrue:[	tablas:= true.	].^piezaComida.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:31'!menuPidePiezaJugador: numeroJugador|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos escaqueSelecParaMov piezaComida|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,': Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].(error)ifFalse: [ escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: tablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].].escaqueSelecParaMov:=self menuJugadorElijeMovimiento: posiblesMovimientos.piezaComida:=self jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov.^piezaComida.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 16:47'!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings escaqueSelecMov|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaqueString)asString).	]."HOY arreglar si pieza elegida esta tapada que large error"menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.escaqueSelecMov := unaColPosiblesMovimientos at:menu.^escaqueSelecMov! !!Jugador methodsFor: 'Observadores' stamp: 'Manuel 7/23/2019 19:16'!getTablas^tablas.! !!Jugador methodsFor: 'Observadores' stamp: 'Manuel 7/23/2019 19:16'!getRendicion^rendicion.! !!Jugador methodsFor: 'Observadores' stamp: 'Manuel 7/23/2019 17:41'!getColPiezas^colPiezas.! !!Jugador methodsFor: 'Aplicacion' stamp: 'ManuelLatorre 8/4/2019 16:47'!cambioCharANumero: unaLetra "Como el tablero representa las columnas por letras y mi programa funciona con una matriz (funciona con numeros para filas y columnas) y como no encontre ningun metodo apropiado creo este para poder saber a que fila de mi matriz se refiere con determinadas letras, el 'UIManager default request:' guarda lo ingresado como string por esto mismo tambien transformo los 'numeros' de fila ingresados a su respectivo entero "|numeroLetra|((unaLetra='A') | (unaLetra='a')|(unaLetra='1'))ifTrue: [ numeroLetra :=1 ].((unaLetra='B') | (unaLetra='b')|(unaLetra='2'))ifTrue: [ numeroLetra :=2 ].((unaLetra='C') | (unaLetra='c')|(unaLetra='3'))ifTrue: [ numeroLetra :=3 ].((unaLetra='D') | (unaLetra='d')|(unaLetra='4'))ifTrue: [ numeroLetra :=4 ].((unaLetra='E') | (unaLetra='e')|(unaLetra='5'))ifTrue: [ numeroLetra :=5 ].((unaLetra='F') | (unaLetra='f')|(unaLetra='6'))ifTrue: [ numeroLetra :=6 ].((unaLetra='G') | (unaLetra='g')|(unaLetra='7'))ifTrue: [ numeroLetra :=7 ].((unaLetra='H') | (unaLetra='h')|(unaLetra='8'))ifTrue: [ numeroLetra :=8 ].^numeroLetra.! !!Jugador methodsFor: 'Movimiento' stamp: 'ManuelLatorre 7/30/2019 19:09'!jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov|piezaComida|piezaComida:=nil.escaqueSelec setPieza: nil. "indico que el viejo escaque esta vacio ahora"(escaqueSelecParaMov getPiezaEscaque )ifNotNil:["si el nuevo escaque tiene una pieza elimino el morph e indico que esta vacio para agregar la nueva pieza"piezaComida := (escaqueSelecParaMov getPiezaEscaque).(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.].escaqueSelecParaMov setPieza: piezaSelec."agrego la nueva pieza al escaque"piezaSelec setFilaPieza: (escaqueSelecParaMov getFilaEscaque )."seteo nueva fila y columna de la pieza"piezaSelec setColumnaPieza: (escaqueSelecParaMov getColumnaEscaque ).escaqueSelecParaMov addMorph: (piezaSelec)."Indico que el escaque ahora posee la imagen de la pieza (para que se vea la imagen de la pieza sobre la imagen)"(piezaSelec)position: escaqueSelecParaMov position."ubico la imagen"^piezaComida.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Jugador class	instanceVariableNames: ''!!Jugador class methodsFor: 'Constructor' stamp: 'Manuel 7/15/2019 12:59'!crearjugadorColor: unColor conColPiezas: unaColPiezas enElTablero: unTablero|jugador|jugador:= self new.jugador inicializarJugadorColor: unColor conPiezas: unaColPiezas enElTablero: unTablero.^jugador.! !Object subclass: #Partida	instanceVariableNames: 'tablero colJugadores ganador movimientosMax'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre Ajedrez'!!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:29'!imagenReyNegro|imagenRey|imagenRey := Form fromFileNamed: 'PiezasAjedrez\ReyNegro.png'.^imagenRey.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:28'!imagenDamaNegra|imagenDama|imagenDama := Form fromFileNamed: 'PiezasAjedrez\DamaNegra.png'.^imagenDama.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:29'!imagenPeonNegro|imagenPeon|imagenPeon := Form fromFileNamed: 'PiezasAjedrez\PeonNegro.png'.^imagenPeon.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:33'!imagenAlfilNegro|imagenAlfil|imagenAlfil:= Form fromFileNamed: 'PiezasAjedrez\AlfilNegro.png'.^imagenAlfil.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:29'!imagenTorreNegra|imagenTorre|imagenTorre := Form fromFileNamed: 'PiezasAjedrez\TorreNegra.png'.^imagenTorre.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 7/30/2019 17:00'!crearPiezasNegras: unTablero|miEscaque colPiezasNegras|colPiezasNegras := OrderedCollection new."CREO PEONES"1 to: 8 do:[:col| 	miEscaque:= unTablero escaqueAt: 7 at: col.	(miEscaque) setPieza:(Peon new )."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenPeonNegro.	((miEscaque) getPiezaEscaque)setFilaPieza: 7."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: col.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el peon sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position).	colPiezasNegras add: (miEscaque getPiezaEscaque).	((miEscaque getPiezaEscaque)setPrimerMovimiento: true).	]."Lo ubico en el escaque""CREO TORRES"	miEscaque:= unTablero escaqueAt: 8 at: 1.	(miEscaque) setPieza:(Torre new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreNegra. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 1.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 8.	(miEscaque) setPieza:(Torre new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreNegra. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 8.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo caballos"	miEscaque:= unTablero escaqueAt: 8 at: 2.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 2.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 7.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 7.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).	"CreoAlfiles"		miEscaque:= unTablero escaqueAt: 8 at: 3.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 3.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 6.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 6.				(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo dama"		miEscaque:= unTablero escaqueAt: 8 at: 5.	(miEscaque) setPieza:(Dama new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenDamaNegra.	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 5.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo rey"		miEscaque:= unTablero escaqueAt: 8 at: 4.	(miEscaque) setPieza:(Rey new)."Seteo el rey al escaque"	((miEscaque) getPiezaEscaque)form: self imagenReyNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 4.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		colPiezasNegras do:[:pieza|pieza color: Color black].	^colPiezasNegras.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:28'!imagenCaballoNegro|imagenCaballo|imagenCaballo := Form fromFileNamed: 'PiezasAjedrez\CaballoNegro.png'.^imagenCaballo.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:27'!imagenReyBlanco|imagenRey|imagenRey := Form fromFileNamed: 'PiezasAjedrez\ReyBlanco.png'.^imagenRey.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:26'!imagenDamaBlanca|imagenDama|imagenDama := Form fromFileNamed: 'PiezasAjedrez\DamaBlanca.png'.^imagenDama.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:26'!imagenCaballoBlanco|imagenCaballo|imagenCaballo := Form fromFileNamed: 'PiezasAjedrez\CaballoBlanco.png'.^imagenCaballo.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:27'!imagenTorreBlanca|imagenTorre|imagenTorre := Form fromFileNamed: 'PiezasAjedrez\TorreBlanca.png'.^imagenTorre.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 7/31/2019 14:06'!crearPiezasBlancas: unTablero|miEscaque colPiezasBlancas|colPiezasBlancas:= OrderedCollection new."CREO PEONES"1 to: 8 do:[:col| 	miEscaque:= unTablero escaqueAt: 2 at: col.	(miEscaque) setPieza:(Peon new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenPeonBlanco. "Llamo un metodo para poder 	modificar en el la direccion donde se encuentran las imagenes "	((miEscaque) getPiezaEscaque)setFilaPieza: 2."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: col.				(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."agrego y muestro el peon sobre el 	escaque"	((miEscaque getPiezaEscaque) position: (miEscaque) position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	((miEscaque getPiezaEscaque)setPrimerMovimiento: true).	]."CREO TORRES"	miEscaque:= unTablero escaqueAt: 1 at: 1.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 1.		(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 8.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 8.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"Creo caballos"	miEscaque:= unTablero escaqueAt: 1 at: 2.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 2.		((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).			miEscaque:= unTablero escaqueAt: 1 at: 7.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 7.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"CreoAlfiles"		miEscaque:= unTablero escaqueAt: 1 at: 3.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 3.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 6.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco . 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 6.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo dama"		miEscaque:= unTablero escaqueAt: 1 at: 5.	(miEscaque) setPieza:(Dama new )."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenDamaBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 5.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo rey"		miEscaque:= unTablero escaqueAt: 1 at: 4.	(miEscaque) setPieza:(Rey new)."Seteo el rey al escaque"	((miEscaque) getPiezaEscaque)form: self imagenReyBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 4.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		colPiezasBlancas do: [:pieza| pieza color: Color white ].		^colPiezasBlancas.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:25'!imagenAlfilBlanco|imagenAlfil|imagenAlfil:= Form fromFileNamed: 'PiezasAjedrez\AlfilBlanco.png'.^imagenAlfil.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:27'!imagenPeonBlanco|imagenPeon|imagenPeon := Form fromFileNamed: 'PiezasAjedrez\PeonBlanco.png'.^imagenPeon.! !!Partida methodsFor: 'Movimiento' stamp: 'Manuel 7/20/2019 15:23'!moverPiezaDeFila: unaFilaSelect deColumna: unaColSelect aFila: unaFilaMov yCol: unaColMov"El metodo mueve las piezas de un escaque hacia a otro. si se indica un escaque que ya posea una pieza esta es sobreEscrita (eliminada) por la pieza que se movio (sin distinguir entre colores)"|piezaAMover escaqueDondeSeMueve|piezaAMover:= (tablero escaqueAt: unaFilaSelect at: unaColSelect) getPiezaEscaque.escaqueDondeSeMueve:= (tablero escaqueAt: unaFilaMov  at: unaColMov).((tablero escaqueAt: unaFilaSelect at: unaColSelect)getPiezaEscaque) delete. "Borro el morph de la pieza"(tablero escaqueAt: unaFilaSelect at: unaColSelect)setPieza: nil."Pongo en nil la pieza del escaque"escaqueDondeSeMueve setPieza: (piezaAMover) . "le asigno la pieza al nuevo escaque"escaqueDondeSeMueve addMorph: (piezaAMover). "le agrego el morph pieza"((escaqueDondeSeMueve getPiezaEscaque) position: escaqueDondeSeMueve position)."le asigno a la pieza la posicion del escaque"! !!Partida methodsFor: 'initialization' stamp: 'Manuel 7/21/2019 17:51'!initialize |colPiezasBlancas colPiezasNegras|super initialize.colJugadores :=OrderedCollection new. "Variable de instancia la indico como OrderedCollection"tablero:=Tablero new. "Creo el tablero"colPiezasBlancas:=(self crearPiezasBlancas: tablero)."creo,muestro y devuelvo una coleccion de piezas (uso colPiezas... ya que lo necesito para crear los jugadores)"colPiezasNegras :=(self crearPiezasNegras: tablero).colJugadores add: (self crearJugadorBlancas: colPiezasBlancas)."creo jugador Blanco y lo agrego a colJugadores (le asigno directamente su coleccion de piezas)"colJugadores add: (self crearJugadorNegras: colPiezasNegras)."creo jugador Negro y lo agrego a colJugadores (le asigno directamente su coleccion de piezas"self menuDeJuego."Primer menu que aparecera"! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 17:07'!menuDeJuego|menuInicio|menuInicio:=UIManager default "Elije crear un juego (crea el tablero con piezas) o Salir"chooseFrom: #('CREAR jUEGO' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menuInicio=1) ifTrue: [ 	movimientosMax :=UIManager default request: 'Ingrese la cantidad de movimientos maximas permitidas entre ambos jugadores' initialAnswer:'Cantidad de movimientos maxima'.	movimientosMax := movimientosMax asInteger.	tablero openInWorld.	]. (menuInicio=2)ifFalse:[ "no lo pongo dentro del ifTrue anterior ya que largaba mensajes Warning y de paso aprovecho el valor que devuelve seleccionar 'SALIR', en caso de seleccionar 'SALIR' el programa no hace nada y se cierra el Menu"self menuEmpezarJuego. ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 8/4/2019 14:59'!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos empate|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.cantMovimientos:=0.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorFueraTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]."SUMO MOVIMIENTO Y VERIFICO SI SE EXEDIO PARA TERMINAR EL JUEGO EN TABLAS"cantMovimientos := cantMovimientos +1.(cantMovimientos >= movimientosMax )ifTrue: [ ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas por que se realizo la cantidad de movimientos preestablecida por los jugadores') title: 'FIN DEL JUEGO'.			].	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a‚àö¬±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Jugadores' stamp: 'Manuel 7/21/2019 16:19'!crearJugadorBlancas: unaColPiezasBlancas|jugadorBlancas|jugadorBlancas := Jugador crearjugadorColor: 'Blanco' conColPiezas:unaColPiezasBlancas enElTablero: tablero.^jugadorBlancas.! !!Partida methodsFor: 'Jugadores' stamp: 'Manuel 7/21/2019 16:34'!crearJugadorNegras: unaColPiezasNegras|jugadorNegras|jugadorNegras := Jugador crearjugadorColor: 'Negro' conColPiezas:unaColPiezasNegras enElTablero: tablero.^jugadorNegras! !!Partida methodsFor: 'Observadores' stamp: 'Manuel 7/23/2019 17:41'!getColJugadores^colJugadores ! !!Partida methodsFor: 'Observadores' stamp: 'Manuel 7/20/2019 14:32'!getTablero "BORRAR"^tablero.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: ''!!Partida class methodsFor: 'Constructor' stamp: 'Manuel 7/15/2019 13:02'!crearpartidaEnTablero: unTablero conJugadores: unaColJugadores|partida|partida:= self new.partida inicializarPartidaEnTablero: unTablero conJugadores: unaColJugadores.^partida.! !ImageMorph subclass: #Pieza	instanceVariableNames: 'filaPieza columnaPieza colPosiblesMovimientos'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre Ajedrez'!!Pieza methodsFor: 'initialization' stamp: 'ManuelLatorre 7/28/2019 15:06'!initializesuper initialize.colPosiblesMovimientos :=OrderedCollection new.! !!Pieza methodsFor: 'Seters' stamp: 'ManuelLatorre 7/30/2019 16:52'!setColumnaPieza: unaColcolumnaPieza := unaCol.! !!Pieza methodsFor: 'Seters' stamp: 'Manuel 7/22/2019 16:38'!setFilaPieza: unaFilafilaPieza := unaFila.! !!Pieza methodsFor: 'Observadores' stamp: 'Manuel 7/22/2019 16:39'!getColumnaPieza^columnaPieza.! !!Pieza methodsFor: 'Observadores' stamp: 'Manuel 7/25/2019 16:22'!getColorPieza^color! !!Pieza methodsFor: 'Observadores' stamp: 'Manuel 7/22/2019 16:39'!getFilaPieza^filaPieza.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/17/2019 17:21'!movimientoUnCasillero|arriba abajo derecha izquierda listaMovimientos diagonalIzquierdaArriba diagonalDerechaAbajo diagonalIzquierdaAbajo diagonalDerechaArriba|listaMovimientos:= OrderedCollection new.arriba:= Array new:2.arriba at: 1  put: (filaPieza-1).arriba at: 2 put: (columnaPieza).abajo:=Array new:2.abajo at: 1  put: (filaPieza+1).abajo at: 2 put: (columnaPieza).derecha:=Array new:2.derecha at: 1  put: (filaPieza).derecha at: 2 put: (columnaPieza+1).izquierda:=Array new:2.izquierda at: 1  put: (filaPieza).izquierda at: 2 put: (columnaPieza-1).diagonalIzquierdaAbajo:=Array new:2.diagonalIzquierdaAbajo at: 1  put: (filaPieza+1).diagonalIzquierdaAbajo at: 2 put: (columnaPieza-1).diagonalIzquierdaArriba:=Array new:2.diagonalIzquierdaArriba at: 1  put: (filaPieza-1).diagonalIzquierdaArriba at: 2 put: (columnaPieza-1).diagonalDerechaAbajo :=Array new:2.diagonalDerechaAbajo at: 1  put: (filaPieza+1).diagonalDerechaAbajo at: 2 put: (columnaPieza+1).diagonalDerechaArriba :=Array new:2.diagonalDerechaArriba at: 1  put: (filaPieza-1).diagonalDerechaArriba at: 2 put: (columnaPieza+1).listaMovimientos add:arriba.listaMovimientos add:abajo.listaMovimientos add:derecha.listaMovimientos add:izquierda.listaMovimientos add:diagonalIzquierdaArriba.listaMovimientos add:diagonalIzquierdaAbajo.listaMovimientos add:diagonalDerechaAbajo.listaMovimientos add:diagonalDerechaArriba.^listaMovimientos.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/18/2019 15:53'!diagonalesenTablero: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/18/2019 15:53'!rectasEnTablero: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].! !!Pieza methodsFor: 'Verificadores' stamp: 'ManuelLatorre 7/31/2019 14:38'!existePiezaEn: unaFila unaColumna: unaColumna|existe|existe:=((filaPieza = unaFila)&(columnaPieza = unaColumna)).^existe.! !!Pieza methodsFor: 'Verificadores' stamp: 'ManuelLatorre 7/28/2019 15:11'!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero"Este metodo lo utilizan las piezas (usando self) para agregar a una coleccion sus posibles movimientos (la coleccion esta indicada como OrderedCollection al inicializar pieza"|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/2/2019 14:07'!posiblesMov: unTablero! !Pieza subclass: #Alfil	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre Ajedrez'!!Alfil methodsFor: 'Constructor' stamp: 'Manuel 7/19/2019 15:58'!inicializarAlfilColorself initialize.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 17:05'!posiblesMov: unTablerocolPosiblesMovimientos reset.self diagonalesenTablero: unTablero.^colPosiblesMovimientos.! !Pieza subclass: #Caballo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre Ajedrez'!!Caballo methodsFor: 'Constructor' stamp: 'Manuel 7/19/2019 16:01'!inicializarCaballoself initialize.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:12'!posiblesMov: unTablero|contFila contColumna|contFila:= filaPieza.contColumna := columnaPieza.colPosiblesMovimientos reset.( (contFila <7)&(contColumna <8) ) ifTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila <7)& (contColumna >1)) ifTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>2)&(contColumna <8) ) ifTrue: [ "verifico escaques desde pos caballo arriba derecha"	contFila:= contFila -2.	contColumna:= contColumna + 1.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>2)&(contColumna >1)) ifTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila -2.	contColumna:= contColumna -1 .	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila >1)&(contColumna<7)) ifTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila <8)&(contColumna <7)) ifTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>1)&(contColumna >2)) ifTrue: [ "verifico escaques desde pos caballo izquierda arriba"	contFila:=contFila-1.	contColumna:= contColumna - 2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.contFila := filaPieza.( (contFila <8)&(contColumna >2)) ifTrue: [ "verifico escaques desde pos caballo izquierda abajo"		contFila := contFila+1.	contColumna:= contColumna -2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !Pieza subclass: #Dama	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre Ajedrez'!!Dama methodsFor: 'Constructor' stamp: 'Manuel 7/19/2019 16:00'!inicializarDamaself initialize.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:52'!posiblesMov: unTablerocolPosiblesMovimientos reset.self diagonalesenTablero: unTablero.self rectasEnTablero: unTablero.^colPosiblesMovimientos.! !Pieza subclass: #Peon	instanceVariableNames: 'primerMovimiento'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre Ajedrez'!!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:50'!getPrimerMovimiento^primerMovimiento.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:19'!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:53'!inicializarPeonself initialize.! !!Peon methodsFor: 'initialization' stamp: 'ManuelLatorre 7/28/2019 17:52'!setPrimerMovimiento: unBoolprimerMovimiento := unBool.! !Pieza subclass: #Rey	instanceVariableNames: 'enJaque'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre Ajedrez'!!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/19/2019 15:31'!posiblesMov: unTablero|listaMovimientos|colPosiblesMovimientos reset.listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento at:2)<9))	ifTrue:[		(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ 			self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: 			unTablero.		].	].].^colPosiblesMovimientos.! !!Rey methodsFor: 'Constructor' stamp: 'Manuel 7/19/2019 16:00'!inicializarReyself initialize.enJaque:= false.! !BorderedMorph subclass: #Tablero	instanceVariableNames: 'colEscaques'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre Ajedrez'!!Tablero methodsFor: 'accessing' stamp: 'Manuel 7/19/2019 16:45'!escaqueAt: unaFila at: unaColumna^(colEscaques at: unaColumna at: unaFila).! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:32'!cellsPerSide^9.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:33'!casillasOscuras1 to: 8 do:[:fil| 1 to:8 do:[:col|		(((fil%2)>0) & (col%2=0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color brown.].				(((fil%2)=0) & (col%2>0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color brown.]		]]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/2/2019 20:32'!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16|imagen1:= Form fromFileNamed: 'PiezasAjedrez\A.png'.imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'PiezasAjedrez\B.png'.imagen2:= imagen2 asMorph.imagen3:= Form fromFileNamed: 'PiezasAjedrez\C.png'.imagen3:= imagen3 asMorph.imagen4:= Form fromFileNamed: 'PiezasAjedrez\D.png'.imagen4:= imagen4 asMorph.imagen5:= Form fromFileNamed: 'PiezasAjedrez\E.png'.imagen5:= imagen5 asMorph.imagen6:= Form fromFileNamed: 'PiezasAjedrez\F.png'.imagen6:= imagen6 asMorph.imagen7:= Form fromFileNamed: 'PiezasAjedrez\G.png'.imagen7:= imagen7 asMorph.imagen8:= Form fromFileNamed: 'PiezasAjedrez\H.png'.imagen8:= imagen8 asMorph.imagen9:= Form fromFileNamed: 'PiezasAjedrez\uno.png'.imagen9:= imagen9 asMorph.imagen10:= Form fromFileNamed: 'PiezasAjedrez\dos.png'.imagen10:= imagen10 asMorph.imagen11:= Form fromFileNamed: 'PiezasAjedrez\tres.png'.imagen11:= imagen11 asMorph.imagen12:= Form fromFileNamed: 'PiezasAjedrez\cuatro.png'.imagen12:= imagen12 asMorph.imagen13:= Form fromFileNamed: 'PiezasAjedrez\cinco.png'.imagen13:= imagen13 asMorph.imagen14:= Form fromFileNamed: 'PiezasAjedrez\seis.png'.imagen14:= imagen14 asMorph.imagen15:= Form fromFileNamed: 'PiezasAjedrez\siete.png'.imagen15:= imagen15 asMorph.imagen16:= Form fromFileNamed: 'PiezasAjedrez\ocho.png'.imagen16:= imagen16 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.	1 to: 9 do:[:pos|	(colEscaques at:9 at:pos)color:Color gray.	(colEscaques at:pos at:9)color:Color gray.	]! !!Tablero methodsFor: 'instance creation' stamp: 'ManuelLatorre 7/31/2019 15:24'!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j.c setColumnaEscaque: i.origin:= self innerBounds origin.self addMorph: c.c position: ((i-1)*c width) @ ((j-1)*c height )+ origin.^c.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 17:08'!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self position: 0@20. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tablero class	instanceVariableNames: 'cellsPerSide'!Pieza subclass: #Torre	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre Ajedrez'!!Torre methodsFor: 'Constructor' stamp: 'Manuel 7/19/2019 16:01'!inicializarTorreColorself initialize.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:34'!posiblesMov: unTablerocolPosiblesMovimientos reset.self rectasEnTablero: unTablero.^colPosiblesMovimientos.! !----End fileIn----!----SNAPSHOT----2020-11-10T10:05:02.042999-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 95!!Escaque methodsFor: 'initialization' stamp: 'Anonymous 11/10/2020 12:46' prior: 33556164!initializesuper initialize.self borderWidth: 5.bounds := 486@374 corner: 556@442.color:= Color white.! !!Escaque methodsFor: 'initialization' stamp: 'Manuel 11/10/2020 12:46' prior: 33605273!initializesuper initialize.self borderWidth: 5.bounds := 486@374 corner: 556@442.color:= Color white.! !!Escaque methodsFor: 'initialization' stamp: 'Manu 11/10/2020 13:01' prior: 33556164!initializesuper initialize.	"Superclase Morph"self borderWidth: 0. "Grosor bordes de los escaques"bounds := 486@374 corner: 556@442. "Tamaño de los escaques"color:= Color white. "Color inicial de cada escaque"! !!Tablero methodsFor: 'initialization' stamp: 'Manu 11/10/2020 13:04' prior: 33604081!initialize| muestraEscaque ancho alto n|super initialize. "SuperClase BorderedMorph"n := self cellsPerSide. "Cantidad de escaques FilaxColumna"muestraEscaque := Escaque new.ancho:= muestraEscaque width. "ancho de escaque"alto:= muestraEscaque height. "alto de escaque"self bounds: (5@10 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self position: 0@20. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'initialization' stamp: 'Manu 11/10/2020 13:05' prior: 33605972!initialize| muestraEscaque ancho alto n|super initialize. "SuperClase BorderedMorph"n := self cellsPerSide. "Cantidad de escaques FilaxColumna"muestraEscaque := Escaque new.ancho:= muestraEscaque width. "ancho de escaque"alto:= muestraEscaque height. "alto de escaque"self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (10 * self borderWidth))."seteo medidas del morph"colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self position: 0@20. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'initialization' stamp: 'Manu 11/10/2020 13:52' prior: 33606574!initialize| muestraEscaque ancho alto n|super initialize. "SuperClase BorderedMorph"n := self cellsPerSide. "Cantidad de escaques FilaxColumna"muestraEscaque := Escaque new.ancho:= muestraEscaque width. "ancho de escaque"alto:= muestraEscaque height. "alto de escaque"self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth))."seteo medidas del morph y ancho linea del borde"colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self position: 0@20. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !----SNAPSHOT----2020-11-10T15:16:13.380836-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 50645!----SNAPSHOT----2020-11-10T15:16:27.135836-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 53332!!Tablero methodsFor: 'instance creation' stamp: 'Manu 11/11/2020 12:13' prior: 33603795!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j.c setColumnaEscaque: i.origin:= self innerBounds origin."self addMorph: c."c position: ((i-1)*c width) @ ((j-1)*c height )+ origin.^c.! !!Tablero methodsFor: 'instance creation' stamp: 'Manu 11/11/2020 12:14' prior: 33608068!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j.c setColumnaEscaque: i.origin:= self innerBounds origin.self addMorph: c."Muestro el escaque"c position: ((i-1)*c width) @ ((j-1)*c height )+ origin."Ubico el escaque"^c.! !!Tablero methodsFor: 'instance creation' stamp: 'Manu 11/11/2020 12:23' prior: 33608367!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j.""c setColumnaEscaque: i.origin:= self innerBounds origin.self addMorph: c."Muestro el escaque"c position: ((i-1)*c width) @ ((j-1)*c height )+ origin."Utilizo las fila y columna de la matriz (i,j) como referencia para ubicar el escaque "^c.! !!Tablero methodsFor: 'instance creation' stamp: 'Manu 11/11/2020 12:23' prior: 33608702!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j."Guardo a que columna pertenece"c setColumnaEscaque: i."Guardo a que fila pertenece"origin:= self innerBounds origin.self addMorph: c."Muestro el escaque"c position: ((i-1)*c width) @ ((j-1)*c height )+ origin."Utilizo las fila y columna de la matriz (i,j) como referencia para ubicar el escaque "^c.! !!Tablero methodsFor: 'instance creation' stamp: 'Manu 11/11/2020 12:23' prior: 33609108!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j."Guardo a que columna pertenece de la matriz"c setColumnaEscaque: i."Guardo a que fila pertenece matriz"origin:= self innerBounds origin.self addMorph: c."Muestro el escaque"c position: ((i-1)*c width) @ ((j-1)*c height )+ origin."Utilizo las fila y columna de la matriz (i,j) como referencia para ubicar el escaque "^c.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 12:25' prior: 33607201!initialize| muestraEscaque ancho alto n|super initialize. "SuperClase BorderedMorph"n := self cellsPerSide. "Cantidad de escaques FilaxColumna"muestraEscaque := Escaque new.ancho:= muestraEscaque width. "ancho de escaque"alto:= muestraEscaque height. "alto de escaque"self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth))."seteo medidas del morph y ancho linea del borde"colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ]."La matriz es para tener referencia de los escaques y poder trabajar SOBRE ellos, cuando se crea el escaque hago que se muestre desde ahi"self position: 0@30. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 12:25' prior: 33610060!initialize| muestraEscaque ancho alto n|super initialize. "SuperClase BorderedMorph"n := self cellsPerSide. "Cantidad de escaques FilaxColumna"muestraEscaque := Escaque new.ancho:= muestraEscaque width. "ancho de escaque"alto:= muestraEscaque height. "alto de escaque"self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth))."seteo medidas del morph y ancho linea del borde"colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ]."La matriz es para tener referencia de los escaques y poder trabajar SOBRE ellos, cuando se crea el escaque hago que se muestre desde ahi"self position: 0@100. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 12:25' prior: 33610853!initialize| muestraEscaque ancho alto n|super initialize. "SuperClase BorderedMorph"n := self cellsPerSide. "Cantidad de escaques FilaxColumna"muestraEscaque := Escaque new.ancho:= muestraEscaque width. "ancho de escaque"alto:= muestraEscaque height. "alto de escaque"self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth))."seteo medidas del morph y ancho linea del borde"colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ]."La matriz es para tener referencia de los escaques y poder trabajar SOBRE ellos, cuando se crea el escaque hago que se muestre desde ahi"self position: 0@20. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'instance creation' stamp: 'Manu 11/11/2020 12:29' prior: 33609573!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j."Guardo a que columna pertenece de la matriz"c setColumnaEscaque: i."Guardo a que fila pertenece matriz""origin:= self innerBounds origin." "Lo utilizo para que los escaques se mantengan dentro del borderedMorph"self addMorph: c."Muestro el escaque"c position: ((i-1)*c width) @ ((j-1)*c height )"+ origin"."Utilizo las fila y columna de la matriz (i,j) como referencia para ubicar el escaque en pantalla, junto con sus dimensiones (width height)"^c."Retorno el nuevo escaque para guardarlo en la matriz"! !!Tablero methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 12:30' prior: 33611647!initialize| muestraEscaque ancho alto n|super initialize. "SuperClase BorderedMorph"n := self cellsPerSide. "Cantidad de escaques FilaxColumna"muestraEscaque := Escaque new.ancho:= muestraEscaque width. "ancho de escaque"alto:= muestraEscaque height. "alto de escaque"self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth))."seteo medidas del morph y ancho linea del borde"colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ]."La matriz es para tener referencia de los escaques y poder trabajar SOBRE ellos, cuando se crea el escaque hago que se muestre desde ahi"self position: 100@20. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 12:30' prior: 33613109!initialize| muestraEscaque ancho alto n|super initialize. "SuperClase BorderedMorph"n := self cellsPerSide. "Cantidad de escaques FilaxColumna"muestraEscaque := Escaque new.ancho:= muestraEscaque width. "ancho de escaque"alto:= muestraEscaque height. "alto de escaque"self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth))."seteo medidas del morph y ancho linea del borde"colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ]."La matriz es para tener referencia de los escaques y poder trabajar SOBRE ellos, cuando se crea el escaque hago que se muestre desde ahi"self position: 100@100. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 12:30' prior: 33613904!initialize| muestraEscaque ancho alto n|super initialize. "SuperClase BorderedMorph"n := self cellsPerSide. "Cantidad de escaques FilaxColumna"muestraEscaque := Escaque new.ancho:= muestraEscaque width. "ancho de escaque"alto:= muestraEscaque height. "alto de escaque"self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth))."seteo medidas del morph y ancho linea del borde"colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ]."La matriz es para tener referencia de los escaques y poder trabajar SOBRE ellos, cuando se crea el escaque hago que se muestre desde ahi"self position: 0@20. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'instance creation' stamp: 'Manu 11/11/2020 12:30' prior: 33612438!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j."Guardo a que columna pertenece de la matriz"c setColumnaEscaque: i."Guardo a que fila pertenece matriz"origin:= self innerBounds origin. "Lo utilizo para que los escaques se mantengan dentro del borderedMorph"self addMorph: c."Muestro el escaque"c position: ((i-1)*c width) @ ((j-1)*c height )+ origin."Utilizo las fila y columna de la matriz (i,j) como referencia para ubicar el escaque en pantalla, junto con sus dimensiones (width height)"^c."Retorno el nuevo escaque para guardarlo en la matriz"! !!Tablero methodsFor: 'instance creation' stamp: 'Manu 11/11/2020 12:32' prior: 33615491!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j."Guardo a que columna pertenece de la matriz"c setColumnaEscaque: i."Guardo a que fila pertenece matriz"origin:= self innerBounds origin. "Lo utilizo para que los escaques se mantengan siempre dentro del borderedMorph"self addMorph: c."Muestro el escaque"c position: ((i-1)*c width) @ ((j-1)*c height )+ origin."Utilizo las fila y columna de la matriz (i,j) como referencia para ubicar el escaque en pantalla, junto con sus dimensiones (width height)"^c."Retorno el nuevo escaque para guardarlo en la matriz"! !!Tablero methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 12:34' prior: 33614700!initialize| muestraEscaque ancho alto n|super initialize. "SuperClase BorderedMorph"n := self cellsPerSide. "Cantidad de escaques FilaxColumna"muestraEscaque := Escaque new.ancho:= muestraEscaque width. "ancho de escaque"alto:= muestraEscaque height. "alto de escaque"self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth))."seteo medidas del BorderedMorph y ancho linea del borde"colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ]."La matriz es para tener referencia de los escaques y poder trabajar SOBRE ellos, cuando se crea el escaque hago que se muestre desde ahi"self position: 0@20. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 12:37' prior: 33600147!casillasOscuras1 to: 8 do:[:fil| 1 to:8 do:[:col|		(((fil%2)>0) & (col%2=0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color black.].				(((fil%2)=0) & (col%2>0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color black.]		]]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 12:37' prior: 33617632!casillasOscuras1 to: 8 do:[:fil| 1 to:8 do:[:col|		(((fil%2)>0) & (col%2=0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color brown.].				(((fil%2)=0) & (col%2>0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color brown.]		]]! !!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 13:08' prior: 33595954!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 13:13' prior: 33618295!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ "Si estoy en el borde no puedo comer para ese lado"		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 13:13' prior: 33621082!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ "Si estoy en el borde no puedo comer para ese lado"		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].		((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 13:15' prior: 33623920!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ "Si estoy en el borde no puedo comer para ese lado"		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].		((columnaPieza>1) & (columnaPieza<8))ifTrue:[ "Lugares para donde puede"	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 13:15' prior: 33626760!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ "Si estoy en el borde no puedo comer para ese lado"		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].		((columnaPieza>1) & (columnaPieza<8))ifTrue:[ "Lugares para donde puede comer"	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 13:15' prior: 33629627!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ "Si estoy en el borde no puedo comer para ese lado"		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].		((columnaPieza>1) & (columnaPieza<8))ifTrue:[ "Lugares para donde puede comer"	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ "si llego al final no puede comer"		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 13:18' prior: 33632500!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ "Si estoy en el borde no puedo comer para ese lado"		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].		((columnaPieza>1) & (columnaPieza<8))ifTrue:[ "Lugares para donde puede comer"	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ "si llego al final no puede comer"		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[ "NO uso verificarEscaqueEnFila por que cuenta que puede comer para adelante"			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 13:25' prior: 33635407!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ "Si estoy en el borde no puedo comer para ese lado"		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].		((columnaPieza>1) & (columnaPieza<8))ifTrue:[ "Lugares para donde puede comer"	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ "si llego al final no puede comer"		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[ "NO uso verificarEscaqueEnFila por que cuenta que puede comer para adelante"			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		]."primerMovimiento := false.Como si o si se va a realizar el movimiento lo seteo en false  MAL"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 13:25' prior: 33638391!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ "Si estoy en el borde no puedo comer para ese lado"		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].		((columnaPieza>1) & (columnaPieza<8))ifTrue:[ "Lugares para donde puede comer"	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ "si llego al final no puede comer"		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[ "NO uso verificarEscaqueEnFila por que cuenta que puede comer para adelante"			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"												primerMovimiento := false.			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		]."primerMovimiento := false.Como si o si se va a realizar el movimiento lo seteo en false  MAL"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 13:26' prior: 33641380!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ "Si estoy en el borde no puedo comer para ese lado"		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].		((columnaPieza>1) & (columnaPieza<8))ifTrue:[ "Lugares para donde puede comer"	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ "si llego al final no puede comer"		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[ "NO uso verificarEscaqueEnFila por que cuenta que puede comer para adelante"			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"												primerMovimiento := false."CORRECCION"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		]."primerMovimiento := false.Como si o si se va a realizar el movimiento lo seteo en false  MAL"^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'Manu 11/11/2020 13:41' prior: 33599048!posiblesMov: unTablero|listaMovimientos|colPosiblesMovimientos reset.listaMovimientos := self movimientoUnCasillero."arriba y abajo los meti en arrays verifico que esten en los limites antes de probar los escaques"listaMovimientos do:[:movimiento| 	(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento at:2)<9))	ifTrue:[		(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ 			self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: 			unTablero.		].	].].^colPosiblesMovimientos.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'Manu 11/11/2020 13:43' prior: 33570697!crearPiezasBlancas: unTablero|miEscaque colPiezasBlancas|colPiezasBlancas:= OrderedCollection new."CREO PEONES"1 to: 8 do:[:col| 	miEscaque:= unTablero escaqueAt: 2 at: col.	(miEscaque) setPieza:(Peon new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenPeonBlanco. "Llamo un metodo para poder 	modificar en el la direccion donde se encuentran las imagenes "	((miEscaque) getPiezaEscaque)setFilaPieza: 2."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: col.				(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."agrego y muestro el peon sobre el 	escaque"	((miEscaque getPiezaEscaque) position: (miEscaque) position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque). "Agrego el peon a colPiezasBlancas"	((miEscaque getPiezaEscaque)setPrimerMovimiento: true). "Indico que es el primer movimiento del peon"	]."CREO TORRES"	miEscaque:= unTablero escaqueAt: 1 at: 1.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 1.		(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 8.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 8.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"Creo caballos"	miEscaque:= unTablero escaqueAt: 1 at: 2.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 2.		((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).			miEscaque:= unTablero escaqueAt: 1 at: 7.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 7.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"CreoAlfiles"		miEscaque:= unTablero escaqueAt: 1 at: 3.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 3.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 6.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco . 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 6.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo dama"		miEscaque:= unTablero escaqueAt: 1 at: 5.	(miEscaque) setPieza:(Dama new )."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenDamaBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 5.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo rey"		miEscaque:= unTablero escaqueAt: 1 at: 4.	(miEscaque) setPieza:(Rey new)."Seteo el rey al escaque"	((miEscaque) getPiezaEscaque)form: self imagenReyBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 4.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		colPiezasBlancas do: [:pieza| pieza color: Color white ].		^colPiezasBlancas.! !!Partida methodsFor: 'Menu' stamp: 'Manu 11/11/2020 13:50' prior: 33578515!menuDeJuego|menuInicio|menuInicio:=UIManager default "Elije crear un juego (crea el tablero con piezas) o Salir"chooseFrom: #('CREAR jUEGO' 'SALIR')"Devuelve 1 o 2"lines: #(1) message: 'Elija una Opcion'.(menuInicio=1) ifTrue: [ 	movimientosMax :=UIManager default request: 'Ingrese la cantidad de movimientos maximas permitidas entre ambos jugadores' initialAnswer:'Cantidad de movimientos maxima'.	movimientosMax := movimientosMax asInteger.	tablero openInWorld.	]. (menuInicio=2)ifFalse:[ "no lo pongo dentro del ifTrue anterior ya que largaba mensajes Warning y de paso aprovecho el valor que devuelve seleccionar 'SALIR', en caso de seleccionar 'SALIR' el programa no hace nada y se cierra el Menu"self menuEmpezarJuego. ].! !!Partida methodsFor: 'Menu' stamp: 'Manu 11/11/2020 13:54' prior: 33579310!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos empate|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.cantMovimientos:=0.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resibo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resibe nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorFueraTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]."SUMO MOVIMIENTO Y VERIFICO SI SE EXEDIO PARA TERMINAR EL JUEGO EN TABLAS"cantMovimientos := cantMovimientos +1.(cantMovimientos >= movimientosMax )ifTrue: [ ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas por que se realizo la cantidad de movimientos preestablecida por los jugadores') title: 'FIN DEL JUEGO'.			].	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a‚àö¬±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'Manu 11/11/2020 13:56' prior: 33654566!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos empate|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.cantMovimientos:=0.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Recibo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resibe nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorFueraTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]."SUMO MOVIMIENTO Y VERIFICO SI SE EXEDIO PARA TERMINAR EL JUEGO EN TABLAS"cantMovimientos := cantMovimientos +1.(cantMovimientos >= movimientosMax )ifTrue: [ ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas por que se realizo la cantidad de movimientos preestablecida por los jugadores') title: 'FIN DEL JUEGO'.			].	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a‚àö¬±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'Manu 11/11/2020 13:56' prior: 33659563!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos empate|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.cantMovimientos:=0.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Recibo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se recibe nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorFueraTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]."SUMO MOVIMIENTO Y VERIFICO SI SE EXEDIO PARA TERMINAR EL JUEGO EN TABLAS"cantMovimientos := cantMovimientos +1.(cantMovimientos >= movimientosMax )ifTrue: [ ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas por que se realizo la cantidad de movimientos preestablecida por los jugadores') title: 'FIN DEL JUEGO'.			].	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a‚àö¬±adidas' a este tambien desaparecen"	 ].! !----SNAPSHOT----2020-11-11T14:01:55.715869-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 53439!----SNAPSHOT----2020-11-11T14:02:07.966869-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 115048!----SNAPSHOT----2020-11-11T17:13:55.273642-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 115155!!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 11/17/2020 12:08' prior: 33644409!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ "Si estoy en el borde no puedo comer para ese lado"		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].		((columnaPieza>1) & (columnaPieza<8))ifTrue:[ "Lugares para donde puede comer"	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ "si llego al final no puede comer"		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[ "NO uso verificarEscaqueEnFila por que cuenta que puede comer para adelante"			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"												primerMovimiento := false."CORRECCION"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		]."primerMovimiento := false.Como si o si se va a realizar el movimiento lo seteo en false  MAL"^colPosiblesMovimientos.! !----SNAPSHOT----2020-11-17T12:08:47.475201-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 115263!----SNAPSHOT----2020-11-17T12:21:05.669201-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 118408!----SNAPSHOT----2020-11-25T19:00:36.300828-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 118516!Object subclass: #ClasePadre	instanceVariableNames: ''	classVariableNames: ''	package: 'Pruebas'!ClasePadre subclass: #Sub1 instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Pruebas'!ClasePadre subclass: #Sub2 instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Pruebas'!!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:07'!sumar:n mas: m! !!Sub1 methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:08'!multiplica:n^n*2! !!Sub2 methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:08'!multiplica:n^n*3! !!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:09' prior: 33673582!sumar:n mas: m|l|l:=n+m.self multiplica:l.! !!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:30'!multiplica:l^self subclassResponsibility.! !ClasePadre removeSelector: #multiplica:!!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:49'!multiplicar: l^l*1.! !!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:49'!multiplica: l^l*1.! !ClasePadre removeSelector: #multiplicar:!!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:49' prior: 33673878!sumar:n mas: m|l|l:=n+m.self multiplicar:l.! !!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:49' prior: 33674429!sumar:n mas: m|l|l:=n+m.self multiplical.! !!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:49' prior: 33674572!sumar:n mas: m|l|l:=n+m.self multiplica:l.! !!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:52' prior: 33674713!sumar:n mas: m|l|l:=n+m.^self multiplica:l.! !!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:55' prior: 33674855!sumar:n mas: m|l|l:=n+m.^self ! !!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:57' prior: 33674999!sumar:n mas: m|l|l:=n+m.^self multiplica l.! !!ClasePadre methodsFor: 'as yet unclassified' stamp: 'Manu 2/15/2021 09:58' prior: 33675130!sumar:n mas: m|l|l:=n+m.^self multiplica: l.! !Smalltalk globals removeClassNamed: #AnObsoleteSub1!Smalltalk globals removeClassNamed: #AnObsoleteSub2!Smalltalk globals removeClassNamed: #AnObsoleteClasePadre!!Pieza methodsFor: 'as yet unclassified' stamp: 'Manu 2/17/2021 11:34' prior: 33591842!posiblesMov: unTablero^self subclassResponsibility.! !----SNAPSHOT----2021-02-17T11:34:32.527847-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 118624!!Peon methodsFor: 'as yet unclassified' stamp: 'Manu 2/17/2021 11:38' prior: 33669892!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ]."Para saber si se mueve para arriba o para abajo"	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ]."Si llegue al final no puedo mover"		(columnaPieza =1)ifTrue: [ "Si estoy en el borde no puedo comer para ese lado"		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].		((columnaPieza>1) & (columnaPieza<8))ifTrue:[ "Lugares para donde puede comer"	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ "si llego al final no puede comer"		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[ "NO uso verificarEscaqueEnFila por que cuenta que puede comer para adelante"			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque una posicion por delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "A√±ade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"												primerMovimiento := false."CORRECCION ERROR DE ABAJO"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'Manu 2/17/2021 11:38' prior: 33647449!posiblesMov: unTablero|listaMovimientos|colPosiblesMovimientos reset.listaMovimientos := self movimientoUnCasillero."arriba y abajo los meti en arrays verifico que esten en los limites antes de probar los escaques"listaMovimientos do:[:movimiento| 	(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento at:2)<9))	ifTrue:[		(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ 			self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: unTablero.		].	].].^colPosiblesMovimientos.! !----SNAPSHOT----2021-02-17T11:49:25.034847-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 121205!Object subclass: #EO	instanceVariableNames: ''	classVariableNames: ''	package: 'POO Tp obligatorio libre Ajedrez'!!EO methodsFor: 'as yet unclassified' stamp: 'Manu 2/18/2021 15:10'!metodo^self subclassResponsibility.! !Smalltalk globals removeClassNamed: #AnObsoleteEO!----SNAPSHOT----2021-02-18T15:12:12.62917-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 124938!----SNAPSHOT----2021-02-18T15:14:20.30417-03:00 Pharo 7.0 - 64bit (old stable).image priorSource: 125326!